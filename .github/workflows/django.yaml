on:
  push:
    branches: ['main']

permissions:
  id-token: 'write'
  contents: 'read'

env:
  AWS_REGION: 'ap-northeast-2'
  ECR_REPOSITORY: 'djangoecs'
  ECS_TASK_DEFINITION: './ecs-task-definition.json'
  # ecs-task-definition.json 의 containerDefinitions.name 에 지정한 값과 일치해야함
  # 이거 기존에 배포된 컨테이너들에서 이름 바뀌면 직전꺼 킬을 못하는듯?
  CONTAINER_NAME: 'test-container'
  ECS_SERVICE_NAME: 'test-service'
  ECS_CLUSTER_NAME: 'django-ecs'

jobs:
  build:
    runs-on: 'ubuntu-latest'
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v3

    - name: 'Python Setup'
      uses: 'actions/setup-python@v5'
      with:
        python-version: '3.13.0'

    - name: 'Install Dependencies'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 'AWS Role을 이용한 로그인'
      uses: 'aws-actions/configure-aws-credentials@v4'
      with:
        role-to-assume: 'arn:aws:iam::484907495106:role/django-role'
        role-session-name: 'blablaWhatIWant'
        aws-region: 'ap-northeast-2'
    
    - name: 'ECR에 로그인'
      id: 'login-ecr'
      uses: 'aws-actions/amazon-ecr-login@v2'

    - name: 'build and push image to Amazon ECR'
      id: 'build-image'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: 'push된 이미지로 ECS Task Definition revision 생성'
      id: 'task-def'
      uses: 'aws-actions/amazon-ecs-render-task-definition@v1'
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: 'Deploy ECS Task Definition'
      uses: 'aws-actions/amazon-ecs-deploy-task-definition@v2'
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true